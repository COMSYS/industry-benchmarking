# Application name used by SCONE
# TEEBench Benchmarking Application

# This is the Policy File which defines what is allowed to be executed with SCONE,
# i.e. the certificates that are mandatory and used inside the enclave, as well as the
# access policies, secret files and attestation security concerns.

name: $TEEBENCH_SESSION
version: "0.3"

# Access control:
#   - only the data owner (CREATOR) can read or update the session
#   - even the data owner cannot read the session secrets (i.e., the volume key and tag) or delete the session

access_policy:
  read:
    - CREATOR
  update:
    - CREATOR

# Service Defintion
#   - Especially the service name is relevant for registering the secrets
#   - MRENCLAVE performs measurements

services:
  - name: teebench_server
    image_name: teebench_server_image
    mrenclaves: [$MRENCLAVE]
    command: "./execute.sh"
    environment:
      SCONE_MODE: sim
      SCONE_LOG: "7"
      GREETING: TEEBENCH running with TLS and auto-generated certs!

# Security features
#   - Imposed security features, e.g. no multithreading or no µCode updates

security:
  attestation:
    tolerate: [hyperthreading, outdated-tcb]
    ignore_advisories: [INTEL-SA-00161, INTEL-SA-00270]
    trusted_scone_qe_pubkeys: ["767F39E8DDED2229EE1C2F99ED8BAD26E0C2853DE1802ECA6D49EE71FA6FD038"]

# Key provisioning
#   - These keys are mapped into the fileystem at the given path once attestation is successful
#   - The program can thus use the keys accordingly

images:
  - name: teebench_server_image
    injection_files:
      - path: /usr/src/teebench/templates/crypto/server/server.pem
        content: $$SCONE::teebench_certificate$$
      - path: /usr/src/teebench/templates/crypto/server/server.key
        content: $$SCONE::teebench_cert_private_key$$

# Application Secrets:
#   - ASCII: Printable Character without line breaks and NULL-Bytes
#   - Secret Placeholders: For environment variables like my_password, use $$SCONE::my_password$$
#   - Binary: similar to ASCII but NULL-bytes and NL are allowed. Use hexadecimal coding
#   - private-key: For generating X.509 certificates for signing other participants' public keys
#       - key_type: E.g. Ed25519, RSA-2048 or RSA-3072
#       - migrate: Keep private key when upgrading session (new SVN) (boolean)
#   - x509 and x509-ca: For establishing a PKI

# Key generation
#   - When the enclave has sucessfully performed remote attestation the keys will be generated / provisioned
#   - How we do attestation:
#     1. First we define a certificate authority which has its own Public private keypair
#       - We can also us explicit certificates with SCONE multiline
#     2. We ask SCONE CAS to generate "teebench_certificate" which is used for attestation
#       - !!! The private keys are NOT visible in the policy → service administrators cannot use the private keys!!!

secrets:
  - name: teebench_ca_private_key
    kind: private-key

  - name: teebench_cert_private_key
    kind: private-key

  - name: teebench_ca_certificate
    kind: x509-ca
    private_key: teebench_ca_private_key
    common_name: "TeebenchCA"
    export_public: true # This is important for verification - when the public CA and the API keys match - OK.

  - name: teebench_certificate
    kind: x509
    private_key: teebench_cert_private_key
    issuer: teebench_ca_certificate
    valid_for: 90 days
